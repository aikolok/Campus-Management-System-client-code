{"ast":null,"code":"var _jsxFileName = \"/Users/aika/Desktop/web_dev/client-code/src/components/containers/EditCampusContainer.js\";\n\n/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk, fetchCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        imageUrl: this.state.imageUrl,\n        address: this.state.address,\n        description: this.state.description\n      }; // Update campus in back-end database\n\n      await this.props.editCampus(campus); // Update state, and trigger redirect to show the updated campus\n\n      this.setState({\n        name: \"\",\n        imageUrl: \"\",\n        address: \"\",\n        description: \"\",\n        redirect: true,\n        redirectId: this.props.campus.id\n      });\n    };\n\n    this.state = {\n      name: this.props.campus.name,\n      imageUrl: this.props.campus.imageUrl,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render edit campus input form\n\n\n  render() {\n    // Redirect to updated campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        campus: this.props.ca,\n        campusName: this.state.name,\n        campusImageUrl: this.state.imageUrl,\n        campusAddress: this.state.address,\n        campusDescription: this.state.description,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","EditCampusView","editCampusThunk","fetchCampusThunk","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","imageUrl","address","description","editCampus","redirect","redirectId","id","componentDidMount","fetchCampus","match","params","componentWillUnmount","render","ca","mapState","mapDispatch","dispatch"],"sources":["/Users/aika/Desktop/web_dev/client-code/src/components/containers/EditCampusContainer.js"],"sourcesContent":["/*==================================================\nEditCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditCampusView from '../views/EditCampusView';\nimport { editCampusThunk, fetchCampusThunk } from '../../store/thunks';\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: this.props.campus.name, \n      imageUrl: this.props.campus.imageUrl,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let campus = {\n        name: this.state.name,\n        imageUrl: this.state.imageUrl,\n        address: this.state.address,\n        description: this.state.description\n    };\n    \n    // Update campus in back-end database\n    await this.props.editCampus(campus);\n\n    // Update state, and trigger redirect to show the updated campus\n    this.setState({\n      name: \"\", \n      imageUrl: \"\", \n      address: \"\", \n      description: \"\",\n      redirect: true, \n      redirectId: this.props.campus.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render edit campus input form\n  render() {\n    // Redirect to updated campus's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    }\n    \n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditCampusView \n          campus={this.props.ca}\n          campusName={this.state.name}\n          campusImageUrl={this.state.imageUrl}\n          campusAddress={this.state.address}\n          campusDescription={this.state.description}\n          handleChange = {this.handleChange} \n          handleSubmit = {this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n\n// The following input argument is passed to the \"connect\" function used by \"EditCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n      fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n      editCampus: (campus) => dispatch(editCampusThunk(campus)),\n    })\n}\n\n// Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditCampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,oBAAlD;;;AAEA,MAAMC,mBAAN,SAAkCN,SAAlC,CAA4C;EAC1C;EACAO,WAAW,CAACC,KAAD,EAAO;IAChB,MAAMA,KAAN;;IADgB,KAkBlBC,YAlBkB,GAkBHC,KAAK,IAAI;MACtB,KAAKC,QAAL,CAAc;QACZ,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;MADtB,CAAd;IAGD,CAtBiB;;IAAA,KAyBlBC,YAzBkB,GAyBH,MAAML,KAAN,IAAe;MAC5BA,KAAK,CAACM,cAAN,GAD4B,CACH;;MAEzB,IAAIC,MAAM,GAAG;QACTJ,IAAI,EAAE,KAAKK,KAAL,CAAWL,IADR;QAETM,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAFZ;QAGTC,OAAO,EAAE,KAAKF,KAAL,CAAWE,OAHX;QAITC,WAAW,EAAE,KAAKH,KAAL,CAAWG;MAJf,CAAb,CAH4B,CAU5B;;MACA,MAAM,KAAKb,KAAL,CAAWc,UAAX,CAAsBL,MAAtB,CAAN,CAX4B,CAa5B;;MACA,KAAKN,QAAL,CAAc;QACZE,IAAI,EAAE,EADM;QAEZM,QAAQ,EAAE,EAFE;QAGZC,OAAO,EAAE,EAHG;QAIZC,WAAW,EAAE,EAJD;QAKZE,QAAQ,EAAE,IALE;QAMZC,UAAU,EAAE,KAAKhB,KAAL,CAAWS,MAAX,CAAkBQ;MANlB,CAAd;IAQD,CA/CiB;;IAEhB,KAAKP,KAAL,GAAa;MACXL,IAAI,EAAE,KAAKL,KAAL,CAAWS,MAAX,CAAkBJ,IADb;MAEXM,QAAQ,EAAE,KAAKX,KAAL,CAAWS,MAAX,CAAkBE,QAFjB;MAGXC,OAAO,EAAE,KAAKZ,KAAL,CAAWS,MAAX,CAAkBG,OAHhB;MAIXC,WAAW,EAAE,KAAKb,KAAL,CAAWS,MAAX,CAAkBI,WAJpB;MAKXE,QAAQ,EAAE,KALC;MAMXC,UAAU,EAAE;IAND,CAAb;EAQD;;EAEDE,iBAAiB,GAAG;IAClB;IACA,KAAKlB,KAAL,CAAWmB,WAAX,CAAuB,KAAKnB,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBJ,EAA/C;EACD,CAjByC,CAmB1C;;;EAgCA;EACAK,oBAAoB,GAAG;IACnB,KAAKnB,QAAL,CAAc;MAACY,QAAQ,EAAE,KAAX;MAAkBC,UAAU,EAAE;IAA9B,CAAd;EACH,CAtDyC,CAwD1C;;;EACAO,MAAM,GAAG;IACP;IACA,IAAG,KAAKb,KAAL,CAAWK,QAAd,EAAwB;MACtB,oBAAQ,QAAC,QAAD;QAAU,EAAE,EAAG,WAAU,KAAKL,KAAL,CAAWM,UAAW;MAA/C;QAAA;QAAA;QAAA;MAAA,QAAR;IACD,CAJM,CAMP;;;IACA,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,cAAD;QACE,MAAM,EAAE,KAAKhB,KAAL,CAAWwB,EADrB;QAEE,UAAU,EAAE,KAAKd,KAAL,CAAWL,IAFzB;QAGE,cAAc,EAAE,KAAKK,KAAL,CAAWC,QAH7B;QAIE,aAAa,EAAE,KAAKD,KAAL,CAAWE,OAJ5B;QAKE,iBAAiB,EAAE,KAAKF,KAAL,CAAWG,WALhC;QAME,YAAY,EAAI,KAAKZ,YANvB;QAOE,YAAY,EAAI,KAAKM;MAPvB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAcD;;AA9EyC,C,CAiF5C;AACA;AACA;;;AACA,MAAMkB,QAAQ,GAAIf,KAAD,IAAW;EAC1B,OAAO;IACLD,MAAM,EAAEC,KAAK,CAACD,MADT,CACkB;;EADlB,CAAP;AAGD,CAJD,C,CAMA;AACA;AACA;;;AACA,MAAMiB,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAO;IACLR,WAAW,EAAGF,EAAD,IAAQU,QAAQ,CAAC9B,gBAAgB,CAACoB,EAAD,CAAjB,CADxB;IAELH,UAAU,EAAGL,MAAD,IAAYkB,QAAQ,CAAC/B,eAAe,CAACa,MAAD,CAAhB;EAF3B,CAAP;AAIH,CALD,C,CAOA;AACA;AACA;;;AACA,eAAehB,OAAO,CAACgC,QAAD,EAAWC,WAAX,CAAP,CAA+B5B,mBAA/B,CAAf"},"metadata":{},"sourceType":"module"}