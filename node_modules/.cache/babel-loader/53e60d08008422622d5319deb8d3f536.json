{"ast":null,"code":"var _jsxFileName = \"/Users/aika/Desktop/web_dev/client-code/src/components/containers/NewCampusContainer.js\";\n\n/*==================================================\nNewCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        imageUrl: this.state.imageUrl,\n        address: this.state.address,\n        description: this.state.description\n      }; // Add new campus in back-end database\n\n      let newCampus = await this.props.addCampus(campus); // Update state, and trigger redirect to show the new campus\n\n      this.setState({\n        name: \"\",\n        imageUrl: \"\",\n        address: \"\",\n        description: \"\",\n        redirect: true,\n        redirectId: newCampus.id\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      imageUrl: \"\",\n      address: \"\",\n      description: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new campus input form\n\n\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","imageUrl","address","description","newCampus","addCampus","redirect","redirectId","id","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["/Users/aika/Desktop/web_dev/client-code/src/components/containers/NewCampusContainer.js"],"sourcesContent":["/*==================================================\nNewCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: \"\", \n      imageUrl: \"\",\n      address: \"\",\n      description: \"\",\n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let campus = {\n        name: this.state.name,\n        imageUrl: this.state.imageUrl,\n        address: this.state.address,\n        description: this.state.description\n    };\n    \n    // Add new campus in back-end database\n    let newCampus = await this.props.addCampus(campus);\n\n    // Update state, and trigger redirect to show the new campus\n    this.setState({\n      name: \"\", \n      imageUrl: \"\", \n      address: \"\", \n      description: \"\",\n      redirect: true, \n      redirectId: newCampus.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new campus input form\n  render() {\n    // Redirect to new campus's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewCampusView \n          handleChange = {this.handleChange} \n          handleSubmit = {this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\n    })\n}\n\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewCampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAASC,cAAT,QAA+B,oBAA/B;;;AAEA,MAAMC,kBAAN,SAAiCL,SAAjC,CAA2C;EACzC;EACAM,WAAW,CAACC,KAAD,EAAO;IAChB,MAAMA,KAAN;;IADgB,KAalBC,YAbkB,GAaHC,KAAK,IAAI;MACtB,KAAKC,QAAL,CAAc;QACZ,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;MADtB,CAAd;IAGD,CAjBiB;;IAAA,KAoBlBC,YApBkB,GAoBH,MAAML,KAAN,IAAe;MAC5BA,KAAK,CAACM,cAAN,GAD4B,CACH;;MAEzB,IAAIC,MAAM,GAAG;QACTJ,IAAI,EAAE,KAAKK,KAAL,CAAWL,IADR;QAETM,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAFZ;QAGTC,OAAO,EAAE,KAAKF,KAAL,CAAWE,OAHX;QAITC,WAAW,EAAE,KAAKH,KAAL,CAAWG;MAJf,CAAb,CAH4B,CAU5B;;MACA,IAAIC,SAAS,GAAG,MAAM,KAAKd,KAAL,CAAWe,SAAX,CAAqBN,MAArB,CAAtB,CAX4B,CAa5B;;MACA,KAAKN,QAAL,CAAc;QACZE,IAAI,EAAE,EADM;QAEZM,QAAQ,EAAE,EAFE;QAGZC,OAAO,EAAE,EAHG;QAIZC,WAAW,EAAE,EAJD;QAKZG,QAAQ,EAAE,IALE;QAMZC,UAAU,EAAEH,SAAS,CAACI;MANV,CAAd;IAQD,CA1CiB;;IAEhB,KAAKR,KAAL,GAAa;MACXL,IAAI,EAAE,EADK;MAEXM,QAAQ,EAAE,EAFC;MAGXC,OAAO,EAAE,EAHE;MAIXC,WAAW,EAAE,EAJF;MAKXG,QAAQ,EAAE,KALC;MAMXC,UAAU,EAAE;IAND,CAAb;EAQD,CAZwC,CAczC;;;EAgCA;EACAE,oBAAoB,GAAG;IACnB,KAAKhB,QAAL,CAAc;MAACa,QAAQ,EAAE,KAAX;MAAkBC,UAAU,EAAE;IAA9B,CAAd;EACH,CAjDwC,CAmDzC;;;EACAG,MAAM,GAAG;IACP;IACA,IAAG,KAAKV,KAAL,CAAWM,QAAd,EAAwB;MACtB,oBAAQ,QAAC,QAAD;QAAU,EAAE,EAAG,WAAU,KAAKN,KAAL,CAAWO,UAAW;MAA/C;QAAA;QAAA;QAAA;MAAA,QAAR;IACD,CAJM,CAMP;;;IACA,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,aAAD;QACE,YAAY,EAAI,KAAKhB,YADvB;QAEE,YAAY,EAAI,KAAKM;MAFvB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AApEwC,C,CAuE3C;AACA;AACA;;;AACA,MAAMc,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAO;IACHP,SAAS,EAAGN,MAAD,IAAYa,QAAQ,CAACzB,cAAc,CAACY,MAAD,CAAf;EAD5B,CAAP;AAGH,CAJD,C,CAMA;AACA;AACA;;;AACA,eAAef,OAAO,CAAC,IAAD,EAAO2B,WAAP,CAAP,CAA2BvB,kBAA3B,CAAf"},"metadata":{},"sourceType":"module"}