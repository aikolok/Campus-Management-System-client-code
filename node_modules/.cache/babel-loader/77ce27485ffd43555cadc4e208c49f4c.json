{"ast":null,"code":"var _jsxFileName = \"/Users/aika/Desktop/web_dev/client-code/src/components/containers/EditStudentContainer.js\";\n\n/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      console.log(event.target.value);\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      if (this.state.campusId === null) {}\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        campusId: this.state.campusId,\n        id: this.props.student.id\n      }; // Update student in back-end database\n\n      await this.props.editStudent(student); // Update state, and trigger redirect to show the updated student\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageUrl: \"\",\n        gpa: null,\n        campusId: null,\n        redirect: true,\n        redirectId: this.props.student.id\n      });\n    };\n\n    this.state = {\n      firstname: this.props.student.firstname,\n      lastname: this.props.student.lastname,\n      email: this.props.student.email,\n      imageUrl: this.props.student.imageUrl,\n      gpa: this.props.student.gpa,\n      campusId: this.props.student.campusId,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    // Get student ID from URL (API link)\n    this.props.fetchStudent(this.props.match.params.id);\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render edit student input form\n\n\n  render() {\n    // Redirect to updated student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        student: this.props.student.name,\n        studentFName: this.state.firstname,\n        studentLName: this.state.lastname,\n        studentEmail: this.state.email,\n        studentImageUrl: this.state.imageUrl,\n        studentGpa: this.state.gpa,\n        studentCampusId: this.state.campusId,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\n\n\nconst mapState = state => {\n  return {\n    student: state.student // Get the State object from Reducer \"student\"\n\n  };\n}; // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","EditStudentView","editStudentThunk","fetchStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","console","log","handleSubmit","preventDefault","state","campusId","student","firstname","lastname","email","imageUrl","gpa","id","editStudent","redirect","redirectId","componentDidMount","fetchStudent","match","params","componentWillUnmount","render","mapState","mapDispatch","dispatch"],"sources":["/Users/aika/Desktop/web_dev/client-code/src/components/containers/EditStudentContainer.js"],"sourcesContent":["/*==================================================\nEditStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: this.props.student.firstname, \n      lastname: this.props.student.lastname, \n      email: this.props.student.email,\n      imageUrl: this.props.student.imageUrl,\n      gpa: this.props.student.gpa,\n      campusId: this.props.student.campusId, \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    // Get student ID from URL (API link)\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n    console.log(event.target.value);\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    if (this.state.campusId === null) {\n\n    }\n    \n    let student = {\n      firstname: this.state.firstname,\n      lastname: this.state.lastname,\n      email: this.state.email,\n      imageUrl: this.state.imageUrl,\n      gpa: this.state.gpa,\n      campusId: this.state.campusId,\n      id: this.props.student.id\n    };\n    \n    // Update student in back-end database\n    await this.props.editStudent(student);\n\n    // Update state, and trigger redirect to show the updated student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      email: \"\",\n      imageUrl: \"\",\n      gpa: null,\n      campusId: null,\n      redirect: true, \n      redirectId: this.props.student.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render edit student input form\n  render() {\n    // Redirect to updated student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n    \n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <EditStudentView \n          student={this.props.student.name}\n          studentFName={this.state.firstname}\n          studentLName={this.state.lastname}\n          studentEmail={this.state.email}\n          studentImageUrl={this.state.imageUrl}\n          studentGpa={this.state.gpa}\n          studentCampusId={this.state.campusId}\n          handleChange = {this.handleChange} \n          handleSubmit = {this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"student\".\nconst mapState = (state) => {\n  return {\n    student: state.student,  // Get the State object from Reducer \"student\"\n  };\n};\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n      fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n      editStudent: (student) => dispatch(editStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}