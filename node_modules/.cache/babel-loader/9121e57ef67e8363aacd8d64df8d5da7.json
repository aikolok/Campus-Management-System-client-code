{"ast":null,"code":"var _jsxFileName = \"/Users/aika/Desktop/web_dev/client-code/src/components/containers/CampusContainer.js\";\n\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  unenrollStudent(studentId) {\n    for (let i = 0; this.props.campus.students.length; i++) {\n      if (studentId == this.props.campus.students[i].id) {}\n    }\n  } // Render a Campus view by passing campus data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        deleteCampus: this.props.deleteCampus,\n        editCampus: this.props.editCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId)),\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","editCampusThunk","CampusView","CampusContainer","componentDidMount","props","fetchCampus","match","params","id","unenrollStudent","studentId","i","campus","students","length","render","deleteCampus","editCampus","mapState","state","mapDispatch","dispatch","campusId"],"sources":["/Users/aika/Desktop/web_dev/client-code/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { \n  fetchCampusThunk,\n  deleteCampusThunk,\n  editCampusThunk\n} from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  unenrollStudent(studentId) {\n    for (let i = 0; this.props.campus.students.length; i++) {\n      if (studentId == this.props.campus.students[i].id) {\n        \n      }\n    }\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <CampusView \n          campus={this.props.campus}\n          deleteCampus={this.props.deleteCampus} \n          editCampus={this.props.editCampus}\n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\n    editCampus: (campus) => dispatch(editCampusThunk(campus))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,eAHF,QAIO,oBAJP;AAMA,SAASC,UAAT,QAA2B,UAA3B;;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;EACtC;EACAO,iBAAiB,GAAG;IAClB;IACA,KAAKC,KAAL,CAAWC,WAAX,CAAuB,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;EACD;;EAEDC,eAAe,CAACC,SAAD,EAAY;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgB,KAAKP,KAAL,CAAWQ,MAAX,CAAkBC,QAAlB,CAA2BC,MAA3C,EAAmDH,CAAC,EAApD,EAAwD;MACtD,IAAID,SAAS,IAAI,KAAKN,KAAL,CAAWQ,MAAX,CAAkBC,QAAlB,CAA2BF,CAA3B,EAA8BH,EAA/C,EAAmD,CAElD;IACF;EACF,CAbqC,CAetC;;;EACAO,MAAM,GAAG;IACP,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,UAAD;QACE,MAAM,EAAE,KAAKX,KAAL,CAAWQ,MADrB;QAEE,YAAY,EAAE,KAAKR,KAAL,CAAWY,YAF3B;QAGE,UAAU,EAAE,KAAKZ,KAAL,CAAWa;MAHzB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAUD;;AA3BqC,C,CA8BxC;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAC1B,OAAO;IACLP,MAAM,EAAEO,KAAK,CAACP,MADT,CACkB;;EADlB,CAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMQ,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLhB,WAAW,EAAGG,EAAD,IAAQa,QAAQ,CAACvB,gBAAgB,CAACU,EAAD,CAAjB,CADxB;IAELQ,YAAY,EAAGM,QAAD,IAAcD,QAAQ,CAACtB,iBAAiB,CAACuB,QAAD,CAAlB,CAF/B;IAGLL,UAAU,EAAGL,MAAD,IAAYS,QAAQ,CAACrB,eAAe,CAACY,MAAD,CAAhB;EAH3B,CAAP;AAKD,CAND,C,CAQA;AACA;AACA;;;AACA,eAAef,OAAO,CAACqB,QAAD,EAAWE,WAAX,CAAP,CAA+BlB,eAA/B,CAAf"},"metadata":{},"sourceType":"module"}