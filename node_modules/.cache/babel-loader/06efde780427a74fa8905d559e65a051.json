{"ast":null,"code":"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\n\nconst axios = require('axios'); //All Campuses\n// THUNK CREATOR:\n\n\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`); // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Add Campus\n// THUNK CREATOR:\n\nexport const addCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"campus\" object's data to database\n    let res = await axios.post(`/api/campuses`, campus); // Call Action Creator to return Action object (type + payload with new campuses data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n}; // Delete Campus\n// THUNK CREATOR:\n\nexport const deleteCampusThunk = campusId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete campus (based on \"campusID\") from database\n    await axios.delete(`/api/campuses/${campusId}`); // Delete successful so change state with dispatch\n\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Edit Campus\n// THUNK CREATOR:\n\nexport const editCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update campus (based on \"id\" and \"campus\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${Campus.id}`, student); // Update successful so change state with dispatch\n\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Single Campus\n// THUNK CREATOR:\n\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // All Students\n// THUNK CREATOR:\n\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`); // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Add Student\n// THUNK CREATOR:\n\nexport const addStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student); // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n\n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n}; // Delete Student\n// THUNK CREATOR:\n\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`); // Delete successful so change state with dispatch\n\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Edit Student\n// THUNK CREATOR:\n\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); // Update successful so change state with dispatch\n\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n}; // Single Student\n// THUNK CREATOR:\n\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`); // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n\n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","err","console","error","addCampusThunk","campus","post","addCampus","deleteCampusThunk","campusId","delete","deleteCampus","editCampusThunk","updatedCampus","put","Campus","id","student","editStudent","updatedStudent","fetchCampusThunk","fetchCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","addStudent","deleteStudentThunk","studentId","deleteStudent","editStudentThunk","fetchStudentThunk","fetchStudent"],"sources":["/Users/aika/Desktop/web_dev/client-code/src/store/thunks.js"],"sourcesContent":["/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"campus\" object's data to database\n    let res = await axios.post(`/api/campuses`, campus);  \n    // Call Action Creator to return Action object (type + payload with new campuses data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR:\nexport const deleteCampusThunk = campusId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete campus (based on \"campusID\") from database\n    await axios.delete(`/api/campuses/${campusId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteCampus(campusId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Campus\n// THUNK CREATOR:\nexport const editCampusThunk = campus => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update campus (based on \"id\" and \"campus\" object's data) from database\n    let updatedCampus = await axios.put(`/api/campuses/${Campus.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}